import os
import shutil

# Create/clear directory
dir_name = "untested_fn_sources"
if os.path.exists(dir_name):
    shutil.rmtree(dir_name)
os.makedirs(dir_name)

# Read Zigzag.pm
try:
    with open("Zigzag.pm", "r") as f:
        zigzag_lines = f.readlines()
except FileNotFoundError:
    print("Error: Zigzag.pm not found.")
    exit(1)

# Process untested functions
try:
    with open("untested_functions_with_lines.txt", "r") as f:
        untested_info = f.readlines()
except FileNotFoundError:
    print("Error: untested_functions_with_lines.txt not found. Make sure it was generated by a previous step.")
    exit(1)

if not untested_info:
    print("No untested functions found in untested_functions_with_lines.txt.")
    # exit cleanly if there are no functions to process - for a script, just means no loop iterations

processed_count = 0
error_count = 0

for line in untested_info:
    parts = line.strip().split()
    if len(parts) < 3:
        print(f"Skipping malformed line in untested_functions_with_lines.txt: {line.strip()}")
        error_count += 1
        continue

    func_name = parts[0]
    try:
        # Assuming line numbers from previous steps are 1-indexed
        start_line = int(parts[1]) - 1
        end_line = int(parts[2]) - 1 # Corrected to -1 for 0-indexed end
    except ValueError:
        print(f"Skipping line with invalid line numbers in untested_functions_with_lines.txt: {line.strip()}")
        error_count += 1
        continue

    if not (0 <= start_line <= end_line < len(zigzag_lines)):
        print(f"Warning: Line numbers for {func_name} (1-indexed: {start_line+1}-{end_line+1}) seem out of bounds for Zigzag.pm (total lines: {len(zigzag_lines)}). Skipping extraction for this function.")
        error_count += 1
        continue

    func_source_lines = zigzag_lines[start_line : end_line + 1]
    func_source = "".join(func_source_lines)

    output_filename = os.path.join(dir_name, f"{func_name}.pl")
    try:
        with open(output_filename, "w") as out_f:
            out_f.write(func_source)
        processed_count += 1
    except IOError as e:
        print(f"Error writing source for {func_name} to {output_filename}: {e}")
        error_count += 1
        continue

if error_count == 0 and processed_count > 0:
    print(f"Successfully extracted source code for {processed_count} untested functions into '{dir_name}/'.")
elif processed_count > 0 and error_count > 0:
    print(f"Partially extracted functions: {processed_count} succeeded, {error_count} errors/warnings encountered. Files in '{dir_name}/'.")
elif error_count > 0 and processed_count == 0 :
    print(f"Failed to extract any functions. {error_count} errors/warnings encountered.")
else: # no untested_info and no errors
    print("No functions processed (untested_functions_with_lines.txt might be empty or all lines skipped).")
